from datetime import datetime
from functools import partial
from dateutil.parser import parse
from typing import Any, Callable, Dict, Optional, Tuple

import ee

from rasterio.crs import CRS
from torchgeo.datasets import BoundingBox

from .geebase import GEERasterDataset


class GEEAlphaEarth(GEERasterDataset):
    """`Google AlphaEarth Satellite Embeddings`_

    This dataset provides global, analysis-ready 64-dimensional embedding vectors for each 10m land and shallow water pixel.
    Unlike raw spectral data, these embeddings summarize complex, multi-source Earth observation data (optical, radar, LiDAR)
    over a full calendar year, capturing temporal surface condition trajectories. Covering ~164km x 164km tiles in UTM
    projection, the unit-length vectors are distributed on a sphere. Key features include consistency across years (enabling
    change detection via vector similarity), linear composability for aggregation, and robustness to common issues like
    clouds and missing data. Generated by the AlphaEarth Foundations model, they are designed for direct use in classification,
    regression, and change detection analyses.

    Spatial resolution: 10 meters
    Temporal resolution: Annual
    """

    all_bands = [f"A{i:02d}" for i in range(64)]

    filename_glob = "*.tif"

    gee_asset_id = "GOOGLE/SATELLITE_EMBEDDING/V1/ANNUAL"

    rgb_bands = ["A01", "A16", "A09"]

    nodata = 0

    instrument = "AlphaEarth"

    is_image = True

    def __init__(
        self,
        year: int,
        roi: Optional[BoundingBox] = None,
        res: float = 10,
        bands: Optional[Tuple[str, ...]] = None,
        path: Optional[str] = None,
        crs: Optional[CRS] = CRS.from_epsg(5070),
        transforms: Callable[[Dict[str, Any]], Dict[str, Any]] | None = None,
        download: bool = False,
        overwrite: bool = False,
        cache: bool = True,
    ) -> None:
        """
        Initialize a GEELandsat8 dataset instance.

        Args:
            year : The year of the dataset.
            roi : Region of interest for data retrieval.
            res : Resolution of the dataset in meters. Default is 30.
            path : Directory for data storage. Required if download is True.
            crs : Coordinate reference system used to load the image. Default is None.
            transforms : Optional transform function.
            download : Whether to download data. Default is False.
            overwrite : Whether to overwrite existing data. Default is False.
            cache : Use cache to store data in memory. Default is True.
        """
        super().__init__(
            # tiles=tiles,
            roi=roi,
            path=path,
            crs=crs,
            transforms=transforms,
            download=download,
            overwrite=overwrite,
            cache=cache,
        )
        self.res = res
        self.bands = bands or self.rgb_bands
        self.filename_suffix = f"_{year}"
        self.date_start = f"{year}-01-01"
        self.date_end = f"{year + 1}-01-01"

    @property
    def collection(self):
        return (
            ee.ImageCollection(self.gee_asset_id)
            # .filter(ee.Filter.lt("CLOUD_COVER", 20))
            .filterDate(self.date_start, self.date_end)
            # .map(self._preprocess)
            .select(self.bands)
        )

    def _reducer(self, collection: ee.ImageCollection) -> ee.Image:
        return collection.median()

    def _preprocess(self, image: ee.Image):
        return image
